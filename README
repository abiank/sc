This is a much modified version of the public domain spread sheet sc,
originally by James Gosling, and posted a number of years ago by Mark
Weiser as vc.

The current maintainer is Chuck Martin (nrocinu@myrealbox.com).  I
originally got involved with sc because I wanted a good text-based
spreadsheet program, and nothing I could find seemed to suit my needs.
After looking at several different programs, I settled on sc as the
program with the most promise, especially since source code was available,
which meant I could modify it to add the features I needed.  Since it
appeared that no one was maintaining it anymore, I decided to take up the
cause myself, although I don't want to claim ownership of the program.  I
would like to thank those who have made their own contributions to making
sc a better program.

I apologize for taking so long to release this version.  I've been wanting
to do it for quite some time, but have been holding off until I could find
the time to update the documentation properly, and other responsibilities
have prevented me from doing that until recently.  On the bright side,
this version has been in use more extensively, and I believe it to be
more stable and bug-free than any previous version.

The CHANGES file lists the changes from 6.1 to 7.16.  Although I've
already added all of the "must have" features I needed, and then some,
I'm willing to continue maintaining sc for as long as I'm able, and I'll
certainly share any new features and bugfixes I come up with.  If anyone
else finds any bugs or would like to contribute patches, please send them
to me.  If they're useful and they work, I'll probably add them.  I prefer
to keep it simple, though, since that's what drew me to sc instead of some
other "full-featured" spreadsheet in the first place.  I like the Unix
philosophy of making each program do one thing and do it well, and would
rather leave all the fancy graphics and other features to other programs
that are better suited for them.

Many of the items in the TODO list were there before I took over maintaining
sc, and although I won't be adding those features myself, I left them in
the list in case someone else still wants to add them.  I've added undo to
the TODO list because I feel it is a much needed feature, but I won't make
any promises as to when (or if) I will get to it.  If anyone else would
like to tackle it, feel free to do so.

I've tried to avoid changing key bindings any more than necessary because
it could be confusing to people who have been using sc for years if the
keybindings suddenly change, but in version 7.13, I finally decided to
change a few things for more compatibility with vi, so that it will be
easier to move back and forth between the two programs.  For example,
the ^F and ^B keys now work like J and K (or PageDown/PageUp).  Also,
the " key is no longer used for entering centered labels, but for named
delete buffers instead, as it does in vi.  The \ key will take its place
for entering centered labels.  This will also make it easier to enter a
so-called "wheel" for filling a cell with a character or string, since
you'll begin such a string by pressing \ twice.  Also, most keyboards have
the "\" and "|" on the same key, which should make it easy to remember
because | is already used for centering an existing string.  I'm sure
someone will let me know if this causes any problems. :)

In version 7.16, I've added a few more changes in sc's key bindings.
For one, the range commands now all begin with "r" instead of "/" because
I intend to add a new search feature that will be more powerful than the
goto command, and I want to use "/" for that feature.  Also, "n" is now
used to repeat the last search (the last goto, for now, but that will
change when the new search feature is implemented).  Since that conflicts
with the former usage of "n", which was for the note commands, these
commands now all begin with "*", and following a link to a note now
requires that "*" be pressed twice in succession.

I've started an announcement-only mailing list for those who would like
to find out when new versions of sc are available.  If anyone is interested
in being added to this list, please let me know.  This will not be an
automated list.  Everything will be done manually, and all names will be
put in a "Bcc:" header, so there will be no danger of being added to
someone's spam list.


Problems with color:

I'm no longer running ncurses 1.9.9g on any of my machines or machines
I work with, since it seems to have bugs in the handling of color that
I've been unable to find a work-around for, and upgrading to the latest
version seems to eliminate them.  If anyone else finds a way to work
around these bugs, patches are welcome.

If you have a problem getting highlighting to work when color is enabled,
you may want to check the value of ncv in your terminfo file (this can
be checked with the "tput ncv" command at the shell prompt).  This value
should be an even number in order for standout mode to work.  If ncv is
odd, try subtracting one and recompiling.  See the man pages for tic and
infocmp for how to do this.  The linux terminfo file in some older versions
of ncurses is known to have this problem, for example.  I've also found the
problem in some versions of the terminfo files for xterm and screen.


Compiling the program:

Before you compile, make sure to check the Makefile and uncomment the
lines that pertain to your system and comment out the lines for Linux.
If you run Linux, this step won't be necessary, since that's the default
(since that's what I run).  I haven't tried compiling or running sc on
anything else, but I've used it on both Slackware 4.0 (with ncurses upgraded
to version 5.2) and Slackware 7.1, so I hope I haven't broken anything for
anyone else.  If you get it to compile and run on something else, please
let me know.  If it doesn't work and you can fix it, please send me a patch.


A couple of notes from the previous maintainer:

1) If you have problems with lex.c, and don't care about arrow keys, define
   SIMPLE (-DSIMPLE in the makefile).  SIMPLE causes the arrow keys to not
   be used.

2) If you have problems with your yacc saying: too many terminals ...127...
   find a different yacc: bison, Berkeley yacc, Pd yacc, etc.  AT&T's Sys V
   yacc has small, fixed sized tables.  SCO will allow dynamic yacc tables
   when given the correct flags.


After you get it built, if you aren't familiar with sc, you might want
to try "sc tutorial.sc" for a simple introduction to the basic commands.
Most of the key bindings are patterned after the vi text editor, so if
you're familiar with that program or its variants, you shouldn't have
any problems learning sc.  The tutorial is a bit out-of-date, and doesn't
include any of the new features that have been added since I began
maintaining sc.  If anyone would like to rectify this situation, feel
free.  The same goes for the built-in help system (available by pressing
`?'), although the feature list has grown quite a bit, and that may not be
easy to do without some major changes to the way the help system works.

If you've used sc before, you may want to check out the CHANGES file
to see what's changed, and read the man page for more details.

To print a quick reference card, type the command:
	scqref | [your_printer_commmand]

If you have the command 'file' that uses /etc/magic, and it isn't there
already, you may want to add the following lines:

# sc:  file(1) magic for "sc" spreadsheet
#
38	string		Spreadsheet	sc spreadsheet file

Psc formats ascii files for use in the spreadsheet.  If you don't have
getopts, there is a public domain version by Henry Spencer hidden away in
the VMS_NOTES file.

If you'd like to rename the program to something different, just change
"name=sc" and "NAME=SC" to "name=myfavoritename" and "NAME=MYFAVORITENAME"
and try "make myfavoritename".  (Does anyone need or use this?  If so,
please let me know.  Otherwise, I may remove that capability in a future
version, since it seems to me that it reduces confusion if everyone
refers to the program by the same name.  (I've been told that there is a
program called Sunshine Commander that used the same name, but I may still
drop this, since the sc Spreadsheet Calculator is much more well known)).

Similarly, you can make the documentation with "make myfavoritename.man".
"make install" will make and install the code in EXDIR.  The installation
steps and documentation all key off of the name.  The makefile even changes
the name in the nroffable man page.  If you don't have nroff, you will
have to change sc.man yourself.

Uninstalling the program is now very easy, if you should want to do this.
Just do "make uninstall".


Finding the latest version:

You should be able to ftp the lastest version of sc from ibiblio.org
The directory where you should be able to find the latest version is
/pub/Linux/apps/financial/spreadsheet.  If you can't find it, e-mail me.
I know this is a Linux specific source, but it's the only place I know
of.  If anyone knows of a more O/S-neutral location, please let me know.


Guarantee:

Since some people are wary of using a program that has no guarantee, I've
decided to provide the following guarantee:

  It is a well-known fact that any non-trivial program has bugs.  If
  you haven't found them, you just haven't stumbled upon the proper
  combinations of actions that will cause the bugs to manifest them-
  selves.  Since sc stands for "Spreadsheet Calculator", and since a
  spreadsheet calculator is by definition a non-trivial program, sc is
  guaranteed to have bugs.


Chuck Martin
nrocinu@myrealbox.com

-----
.EH 'SC Quick Reference''$Revision: 7.16 $'

.SH
 Overview:
 
.Lp
 A:   This overview
 B:   Toggle Options
 C:   Set Options
 D:   Cursor movement commands
 E:   Cell entry and editing commands
 F:   Line Editing
 G:   File commands
 H:   Row and column commands
 I:   Range commands
 J:   Miscellaneous commands
 K:   Variable names/Expressions
 L:   Range functions
 M:   Numeric functions
 N:   String functions
 O:   Financial functions
 P:   Time and date functions
 
 Q:   Return to main spreadsheet
 
.SH
 B: Toggle Options
 
.Lp
     ^To  Toggle options. Toggle one option selected by o:
          a    Recalculate automatically or on ``@'' commands.
          o    Optimize expressions upon entry if enabled.
          c    Current cell highlighting enable/disable.
          e    External function execution enable/disable.
          l    Autolabeling defined cells enable/disable.
          n    If enabled, a digit starts a numeric value.
          t    Top line display enable/disable.
          x    Encrypt/decrypt database and listing files (Not available).
          $    Dollar prescale.  If enabled, all numeric constants
               (not expressions) entered are multipled by 0.01.
          r    Newline action.  Toggle between no action, move down
               after entry and move right after entry.
          z    Set the newline action limits to the current row and column
            (for r && z see also set rowlimit=n, collimit=n)
.bp
 
.SH
 C: Set Options
 
.Lp
     S  Set options.  Options include:
          autocalc      Automatic recalculation.
          byrows        Recalculate in row order. (default)
          bycols        Recalculate in column order.
          optimize      Optimize expressions upon entry. (default off)
          iterations=n  Set the number of iterations allowed. (10)
          tblstyle=xx   Set ``T'' output style to:
                        0 (none), tex, latex, slatex, or tbl.
          rndtoeven     Round *.5 to nearest even number instead of
                        always up.
          rowlimit=n    Set the remembered row limit for newline action.
          collimit=n    Set the remembered column limit for newline action.
                        (rowlimit and collimit can both be set by ^Tz)
 
.SH
 D: Cell cursor movement (always OK):
 
.Lp
     ^N ^P      Down, up
     j k l h    Down, up, right, left
     Arrow keys (if the terminal and termcap support them.)
     ^Ed        Go to end of range.  Follow ^E by a direction indicator
                such as ^P or j.
 
     J K L H    Down, up, right, left by 1/2 pages (or 'pagesize' rows)
     SPACE      Forward
     ^H         Back
     TAB        Forward, otherwise starts/ends a range
     ^          Up to row 0 of the current column.
     #          Down to the last valid row of the current column.
     0          Back to column A.  Preface with ^U if numeric mode.
     $          Forward to the last valid column of the current row.
     b          Back then up to the previous valid cell.
     w          Forward then down to the next valid cell.
     g          Go to a cell.  Cell name, range name, quoted string,
                a number, 'error', or 'invalid' to specify which cell.
     ` '        Go to a marked cell (see help screen e for more info.
.bp
 
.SH
 E: Cell entry and editing commands:
 
.Lp
     =    Enter a numeric constant or expression.
     <    Enter a left justified string or string expression.
     \\    Enter a centered label.
     >    Enter a right justified string or string expression.
     e    Edit the current cell's numeric value.
     E    Edit the current cell's string part.
     F    Assign a format to the current cell's numeric value.
     x    Clear the current cell.
     m    Followed by any lowercase letter, marks the current cell
          with that letter.
     c    Copy a marked cell to the current cell.
     +    Increment numeric part
     -    Decrement numeric part
  RETURN  Enter insert mode if the input line was empty (ESC to edit)
 
     In numeric mode, a decimal digit, ``+'', ``-'', and ``.'' all start
     a new numeric constant or expression.
 
.SH
 F: Line Editor
 
.Lp
     Hitting the ESC key while entering any command on the top line
     will start a one-line vi-style editor.  Supported commands:
 
     ESC q        Abort command entry.
     h l          Move cursor forward, backward.
     0 $          Move cursor to the beginning, end of the line.
     b w          Move cursor forward/back one word.
     e            Move cursor to next end-of-word.
     fc           Move cursor to character c.
     tc           Move the cursor to the character before c.
     i a          Enter insert mode before/after the cursor.
     I A          Move to column 0/end of line and enter insert mode.
     x X          Delete the character under/before the cursor.
     rc           Replace the character under the cursor with c.
     cm dm        Change/Delete - m = b,e,f,h,l,t or w.
     R            Enter replace (overstrike) mode.
     s            Delete character under cursor and enter insert mode.
     + j - k / ?  Forward/backward/search the command history.
     n N          Repeat last history search (N = opposite direction).
     . u          Repeat/undo the last command.
     ^V           Enter navigate mode.  Another ^V enters current cell address.
     ^W           Type, in the command line, the current cell's expression.
     ^A           Type, in the command line, the current cell's numeric value.
.bp
 
.SH
 G: File commands:
 
.Lp
     G    Get a new database from a file. 
     M    Merge a new file into the current database.
     P    Put the current database into a file.
     W    Write a listing of the current database into a file in
          a form that matches its appearance on the screen.
     T    Write a listing of the current database to a file, but
          put delimiters between each pair of fields.
          Optionally brackets output with control lines for ``tbl'',
          ``LaTeX'', ``SLaTex'', or ``TeX''.
 
     ``"| program"'' for a file name will pipe output to
     a program for Put, Write and Table.  If a cell name is used
     as the file name, the cell's string part will be used as the
     file name.
 
.SH
 H: Row and column commands:
 
.Lp
     ir, ic      Insert a new, empty row (column)
     ar, ac      Append a new copy of the current row (column)
     dr, dc      Delete the current row (column)
     pr, pc, pm  Pull deleted cells back into the spreadsheet
                 Insert rows, columns or merge the cells.
     vr, vc      Remove expressions from the affected rows (columns),
                 leaving only the values.
     Zr, Zc      Hide (``zap'') the current row (column)
     sr, sc      Show hidden rows (columns)
     f           Set the output format to be used with the values of
                 each cell in this column.  Enter field width and
                 number of fractional digits.  A preceding count can be
                 used to change more than one column.
 
     Commands which move or copy cells also modify the row and column 
     references in the new cell expressions.  Use ``fixed'' or the
     ``$'' style cell reference to supress the change.
 
     @myrow, @mycol        return the row or column of the current cell
     @lastrow, @lastcol    return the row or column of the current cell
.bp
 
.SH
 I: Range commands:
.Lp
     rx   Clear a range. 
     rv   Remove the expressions from a range of cells, leaving 
          just the values.
     rc   Copy a source range to a destination range.
     rf   Fill a range with constant values starting with a given
          value and increasing by a given increment.
     rd   Assign a name to a cell or a range of cells.  Give the
          the name, surrounded by quotes, and either a cell name such
          as ``A10'' or a range such as ``a1:b20''.
     rl   Locks a cell or a range of cells, i.e makes it unchangeable.
     rU   Unlocks a locked cell, i.e makes it changeable.
     rs   Shows the currently defined range names.  Pipe output to
          sort, then to less.
     ru   Use this command to undefine a previously defined range name.
     rF   Assign a format string to a range of cells.
 
     Range operations affect a rectangular region on the screen
     defined by the upper left and lower right cells in the region.
     A range is specified by giving the cell names separated by ``:'',
     such as ``a20:k52''.  Another way to refer to a range is to use
     a name previously defined using ``rd''.
 
.SH
 J: Miscellaneous commands:
 
.Lp
     Q q ^C   Exit from the program.
     ^G ESC   Abort entry of the current command.
     ?        Help
     !        Shell escape.  Enter a command to run.  ``!!'' repeats
              the last command.  Just ``!'' starts an interactive shell.
     ^L       Redraw the screen.
     ^R       Redraw the screen.  Highlight cells with values but no
              expressions.
     ^X       Redraw the screen.  Show formulas, not values.
     C        Redraw the screen with the row containing the current cell
              centered.
     @        Recalculate the spreadsheet.
     TAB      When the character cursor is on the top line TAB can be used
              to start or stop the display of the default range.
.bp
 
.SH
 K: Variable names:
 
.Lp
     K20    Row and column can vary on copies.
     $K$20  Row and column stay fixed on copies.
     $K20   Row can vary; column stays fixed on copies.
     K$20   Row stays fixed; column can vary on copies.
     fixed  holds following expession fixed on copies.
     Cells and ranges can be given a symbolic name via ``rd''.
 
 Expressions:
     -e      Negation                e<=e  Less than or equal
     e+e     Addition                e=e   Equal
     e-e     Subtraction             e!=e  Not Equal
     e*e     Multiplication          e>=e  Greater than or equal
     e/e     Division                e>e  Greater than
     e%e     Modulo                  e<e  Less than
     e^e     Exponentiation          e&e  Boolean operator AND.
     ~e      Boolean operator NOT    e|e  Boolean operator OR
     e?e1:e2  or @if(e,e1,e2)
             Conditional: If e is non zero then then e1, else e2.
     Terms may be constants, variables, and parenthesized expressions.
 
.SH
 L: Range functions:
 
.Lp
     @sum(r)           Sum all valid cells in the range.
     @prod(r)          Multiply together all valid cells in the range.
     @avg(r)           Average all valid cells in the range.
     @count(r)         Count all valid cells in the range.
     @max(r)           Return the maximum value in the range.
     @min(r)           Return the minimum value in the range.
     @stddev(r)        Return the sample standard deviation of 
                       the cells in the range.
     @index(e,r) @stindex(e,r)
                       Return the numeric (string) value of the cell at
                       index e into range r.
     @lookup(e,r) @hlookup(e,r,n) @vlookup(e,r,n)
                       Search through the range r for a value that
                       matches e.  If e is numeric, the last value <= e
                       matches; if string, an exact match is required.
                       @lookup searches a single row (column) and returns
                       the value from the next column (row); @hlookup
                       (@vlookup) searches the first row (column) in r and
                       returns the value n columns (rows) from the match.
.bp
 
.SH
 M: Numeric functions:
 
.Lp
     @atan2(e1,e2)     Arc tangent of e1/e2.
     @ceil(e)          Smallest integer not less than e.
     @eqs(se1,se2)     1 if string expr se1 has the same value as se2.
     @exp(e)           Exponential function of e.
     @abs(e) @fabs(e)  Absolute value of e.
     @floor(e)         The largest integer not greater than e.
     @hypot(x,y)       Sqrt(x*x+y*y).
     @max(e1,e2,...)   The maximum of the values of the e's.
     @min(e1,e2,...)   The minimum of the values of the e's
     @nval(se,e)       The numeric value of a named cell.
     pi       @pi      A constant quite close to pi.
     @pow(e1,e2)       e1 raised to the power of e2.
     @rnd(e)           Round e to the nearest integer.
     @round(e,n)       Round e to n decimal places.
     @sqrt(e)          Square root of e.
     @ston(se)         Convert string expr se to a numeric
     @ln(e)   @log(e)           Natural/base 10 logarithm of e.
     @dtr(e)  @rtd(e)           Convert degrees to/from radians.
     @cos(e)  @sin(e)  @tan(e)  Trig functions of radian arguments.
     @asin(e) @acos(e) @atan(e) Inverse trig function.
 
.SH
 N: String functions:
.Lp
     #                 Concatenate strings.  For example, the
                       string expression ``A0 # "zy dog"'' yields
                       ``the lazy dog'' if A0 is ``the la''.
     @substr(se,e1,e2) Extract characters e1 through e2 from the
                       string expression se.  For example,
                       ``@substr("Nice jacket" 4, 7)'' yields 
                       ``e ja''.
     @fmt(se,e)        Convert a number to a string using sprintf(3).
                       For example,  ``@fmt("*%6.3f*",10.5)'' yields
                       ``*10.500*''.  Use formats are e, E, f, g, and G.
     @sval(se,e)       Return the string value of a cell selected by name.
     @ext(se,e)        Call an external function (program or
                       script).  Convert e to a string and append it
                       to the command line as an argument.  @ext yields
                       a string: the first line printed to standard
                       output by the command.
     @coltoa(e)        Return the column letter(s) from the passed number
     @upper(e) @lower(e)   Return the string in upper/lower case
     @capital(e)       Return the string with words in upper case
     String expressions are made up of constant strings (characters
     surrounded by quotes), variables, and string functions.
.bp
 
.SH
 O: Financial functions:
 
.Lp
     @pmt(e1,e2,e3)    @pmt(60000,.01,360) computes the monthly
                       payments for a $60000 mortgage at 12%
                       annual interest (.01 per month) for 30
                       years (360 months).
 
     @fv(e1,e2,e3)     @fv(100,.005,36) computes the future value
                       of 36 monthly payments of $100 at 6%
                       interest (.005 per month).  It answers the
                       question:  ``How much will I have in 36
                       months if I deposit $100 per month in a
                       savings account paying 6% interest com-
                       pounded monthly?''
 
     @pv(e1,e2,e3)     @pv(1000,.015,36) computes the present
                       value of an ordinary annuity of 36
                       monthly payments of $1000 at 18% annual
                       interest.  It answers the question: ``How
                       much can I borrow at 18% for 30 years if I
                       pay $1000 per month?''
 
.SH
 P: Time and date functions:
 
.Lp
     @now              Return the time encoded in seconds since 1970.
     @dts(e1,e2,e3)    Return e1/e2/e3 encoded in seconds since 1970.
                       Either m/d/y or y/m/d may be used (year must
                       include the century), although y/m/d is preferred.
     @tts(h,m,s)       Return h:m:s encoded in seconds since midnight.
 
     All of the following take an argument expressed in seconds:
 
     @date(e)          Convert the time in seconds to a date
                       string 24 characters long in the following
                       form: ``Sun Sep 16 01:03:52 1973''.  Note
                       that you can extract pieces of this fixed format
                       string with @substr.
     @year(e)          Return the year.  Valid years begin with 1970.
     @month(e)         Return the month: 1 (Jan) to 12 (Dec).
     @day(e)           Return the day of the month: 1 to 31.
     @hour(e)          Return the number of hours since midnight: 0 to 23.
     @minute(e)        Return the number of minutes since the
                       last full hour: 0 to 59.
     @second(e)        Return the number of seconds since the
                       last full minute: 0 to 59.
.bp



